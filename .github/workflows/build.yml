# .github/workflows/build.yml

name: Build & Release

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'pnpm'

      - name: Get version from package.json (Unix)
        id: pkg_unix
        if: runner.os != 'Windows'
        run: echo "version=v$(node -p 'require(\"./package.json\").version')" >> $GITHUB_OUTPUT

      - name: Get version from package.json (Windows)
        id: pkg_win
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $version = (node -p "require('./package.json').version")
          echo "version=v$version" >> $env:GITHUB_OUTPUT

      - name: Set version
        id: pkg
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            echo "version=${{ steps.pkg_win.outputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ steps.pkg_unix.outputs.version }}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Check if tag exists
        id: check_tag
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/${{ steps.pkg.outputs.version }}"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Stop if tag exists
        if: steps.check_tag.outputs.exists == 'true'
        run: |
          echo "> Tag ${{ steps.pkg.outputs.version }} already exists, skipping build."
          exit 0
        shell: bash

      - name: Install dependencies
        run: pnpm install

      - name: Build application
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            pnpm electron:build --mac --publish never
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            pnpm electron:build --linux --publish never
          else
            pnpm electron:build --win --publish never
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

      - name: Rename artifacts
        run: |
          mkdir release
          find dist -type f -exec bash -c 'f="{}"; base=$(basename "$f"); mv "$f" "release/${base,,}"' \;
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chromini-${{ matrix.os }}
          path: release/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Get version from package.json
        id: pkg
        run: echo "version=v$(node -p 'require(\"./package.json\").version')" >> $GITHUB_OUTPUT

      - name: Create tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ steps.pkg.outputs.version }}
          git push origin ${{ steps.pkg.outputs.version }}

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.pkg.outputs.version }}
          name: ${{ steps.pkg.outputs.version }}
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
